{"version":3,"sources":["components/PostItem.tsx","components/PostsList.tsx","utils/fetchClient.ts","types/Errors.ts","components/CommentItem.tsx","components/ErrorNotification.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","api/comments.ts","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostItem","React","memo","post","selectedPostId","onSelectPostId","id","title","className","type","cn","onClick","PostsList","posts","map","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","Errors","client","CommentItem","comment","onDeleteComment","name","email","href","ErrorNotification","error","errorMessage","PostsLoadingError","CommentsError","Loader","NewCommentForm","onAdd","isLoading","postId","useState","authorName","setAuthorName","hasAuthorNameError","setHasAuthorNameError","authorEmail","setAuthorEmail","hasAuthorEmailError","setHasAuthorEmailError","newCommentText","setNewCommentText","hasNewCommentTextError","setHasNewCommentTextError","onSubmit","event","preventDefault","htmlFor","placeholder","value","onChange","target","PostDetails","postDetails","isNewCommentFormOpened","onOpenNewCommentForm","comments","setComments","setIsLoading","isAddingComment","setIsAddingComment","isCommentsLoaded","setIsCommentsLoaded","isCommentsLoadingError","setIsCommentsLoadingError","useEffect","loadedComments","catch","finally","addNewComment","useCallback","addComment","addedComment","prevComments","deleteSelectedComment","commentId","deleteComment","filter","isLoadedCommentsExist","length","isLoadedCommentsNotExist","isLoadedError","isVisibleButton","UserSelector","users","selectedUserId","onSelectUserId","onResetPostId","isUsersListOpened","setIsUsersListOpened","closeUsersList","document","addEventListener","removeEventListener","selectedUserName","find","user","handleClickToggleUsersList","prev","role","userId","App","setUsers","setSelectedUserId","setPosts","isPostsLoaded","setIsPostsLoaded","isPostsLoadingError","setIsPostsLoadingError","setSelectedPostId","setIsNewCommentFormOpened","selectUserId","selectPostId","resetSelectedPostId","openNewCommentForm","loadedPosts","isLoadedPostsExist","isLoadedPostsNotExist","selectedPost","useMemo","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9fb2b71e.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post;\n  selectedPostId: number;\n  onSelectPostId: (postId: number) => void;\n};\n\nexport const PostItem: React.FC<Props> = React.memo(\n  ({\n    post,\n    selectedPostId,\n    onSelectPostId,\n  }) => {\n    const {\n      id,\n      title,\n    } = post;\n\n    const handleClickPostButton = () => {\n      onSelectPostId(id);\n    };\n\n    return (\n      <tr data-cy=\"Post\">\n        <td data-cy=\"PostId\">\n          {id}\n        </td>\n\n        <td data-cy=\"PostTitle\">\n          {title}\n        </td>\n\n        <td className=\"has-text-right is-vcentered\">\n          <button\n            type=\"button\"\n            data-cy=\"PostButton\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-light': selectedPostId !== id },\n            )}\n            onClick={handleClickPostButton}\n          >\n            {selectedPostId === id ? 'Close' : 'Open'}\n          </button>\n        </td>\n      </tr>\n    );\n  },\n);\n","import React from 'react';\nimport { PostItem } from './PostItem';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPostId: number;\n  onSelectPostId: (postId: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = React.memo(\n  ({\n    posts,\n    selectedPostId,\n    onSelectPostId,\n  }) => {\n    return (\n      <div data-cy=\"PostsList\">\n        <p className=\"title\">Posts:</p>\n\n        <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n          <thead>\n            <tr className=\"has-background-link-light\">\n              <th>#</th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {posts.map(post => (\n              <PostItem\n                key={post.id}\n                post={post}\n                selectedPostId={selectedPostId}\n                onSelectPostId={onSelectPostId}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  },\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Errors {\n  PostsLoadingError = 'PostsLoadingError',\n  CommentsError = 'CommentsError',\n}\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment;\n  onDeleteComment: (commentId: number) => void;\n};\n\nexport const CommentItem: React.FC<Props> = React.memo(\n  ({\n    comment,\n    onDeleteComment,\n  }) => {\n    const {\n      id,\n      name,\n      email,\n      body,\n    } = comment;\n\n    return (\n      <article className=\"message is-small\" data-cy=\"Comment\">\n        <div className=\"message-header\">\n          <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n            {name}\n          </a>\n\n          <button\n            data-cy=\"CommentDelete\"\n            type=\"button\"\n            className=\"delete is-small\"\n            aria-label=\"delete\"\n            onClick={() => onDeleteComment(id)}\n          >\n            delete button\n          </button>\n        </div>\n\n        <div className=\"message-body\" data-cy=\"CommentBody\">\n          {body}\n        </div>\n      </article>\n    );\n  },\n);\n","import React from 'react';\nimport { Errors } from '../types/Errors';\n\ntype Props = {\n  error: Errors;\n};\n\nexport const ErrorNotification: React.FC<Props> = React.memo(({ error }) => {\n  let errorMessage = 'Something went wrong!';\n\n  switch (error) {\n    case Errors.PostsLoadingError:\n      errorMessage = 'Can\\'t load posts';\n      break;\n\n    case Errors.CommentsError:\n      errorMessage = 'Can\\'t load comments';\n      break;\n\n    default:\n      break;\n  }\n\n  return (\n    <div\n      className=\"notification is-danger\"\n      data-cy={error}\n    >\n      {errorMessage}\n    </div>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = React.memo(() => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n));\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  onAdd: (comment: Omit<Comment, 'id'>) => void;\n  isLoading: boolean;\n  postId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  onAdd,\n  isLoading,\n  postId,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [hasAuthorNameError, setHasAuthorNameError] = useState(false);\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [hasAuthorEmailError, setHasAuthorEmailError] = useState(false);\n  const [newCommentText, setNewCommentText] = useState('');\n  const [hasNewCommentTextError, setHasNewCommentTextError] = useState(false);\n\n  const handleChangeAuthorName = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setHasAuthorNameError(false);\n    setAuthorName(event.target.value);\n  };\n\n  const handleChangeAuthorEmail = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setHasAuthorEmailError(false);\n    setAuthorEmail(event.target.value);\n  };\n\n  const handleChangeNewCommentText = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setHasNewCommentTextError(false);\n    setNewCommentText(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!authorName || !authorEmail || !newCommentText) {\n      setHasAuthorNameError(!authorName);\n      setHasAuthorEmailError(!authorEmail);\n      setHasNewCommentTextError(!newCommentText);\n\n      return;\n    }\n\n    const newComment: Omit<Comment, 'id'> = {\n      postId,\n      name: authorName,\n      email: authorEmail,\n      body: newCommentText,\n    };\n\n    onAdd(newComment);\n    setNewCommentText('');\n  };\n\n  const handleClickResetBtn = () => {\n    setAuthorName('');\n    setAuthorEmail('');\n    setNewCommentText('');\n    setHasAuthorNameError(false);\n    setHasAuthorEmailError(false);\n    setHasNewCommentTextError(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn(\n              'input',\n              { 'is-danger': hasAuthorNameError },\n            )}\n            value={authorName}\n            onChange={handleChangeAuthorName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasAuthorNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasAuthorNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn(\n              'input',\n              { 'is-danger': hasAuthorEmailError },\n            )}\n            value={authorEmail}\n            onChange={handleChangeAuthorEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasAuthorEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasAuthorEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn(\n              'textarea',\n              { 'is-danger': hasNewCommentTextError },\n            )}\n            value={newCommentText}\n            onChange={handleChangeNewCommentText}\n          />\n        </div>\n\n        {hasNewCommentTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClickResetBtn}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { addComment, deleteComment, getComments } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { Errors } from '../types/Errors';\nimport { Post } from '../types/Post';\nimport { CommentItem } from './CommentItem';\nimport { ErrorNotification } from './ErrorNotification';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  postDetails: Post;\n  isNewCommentFormOpened: boolean;\n  onOpenNewCommentForm: () => void;\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(\n  ({\n    postDetails,\n    isNewCommentFormOpened,\n    onOpenNewCommentForm,\n  }) => {\n    const {\n      id,\n      title,\n      body,\n    } = postDetails;\n\n    const [comments, setComments] = useState<Comment[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isAddingComment, setIsAddingComment] = useState(false);\n    const [isCommentsLoaded, setIsCommentsLoaded] = useState(false);\n    const [isCommentsLoadingError, setIsCommentsLoadingError] = useState(false);\n\n    useEffect(() => {\n      setIsLoading(true);\n      setComments([]);\n\n      getComments(id)\n        .then(loadedComments => {\n          setComments(loadedComments);\n          setIsCommentsLoaded(true);\n          setIsCommentsLoadingError(false);\n        })\n        .catch(() => {\n          setIsCommentsLoadingError(true);\n        })\n        .finally(() => setIsLoading(false));\n    }, [id]);\n\n    const addNewComment = useCallback((comment: Omit<Comment, 'id'>) => {\n      setIsAddingComment(true);\n\n      addComment(comment)\n        .then(addedComment => (\n          setComments(prevComments => [...prevComments, addedComment])\n        ))\n        .finally(() => setIsAddingComment(false));\n    }, []);\n\n    const deleteSelectedComment = useCallback((commentId: number) => {\n      deleteComment(commentId);\n\n      setComments(prevComments => prevComments.filter(comment => (\n        comment.id !== commentId\n      )));\n    }, []);\n\n    const isLoadedCommentsExist = !isLoading\n      && !isCommentsLoadingError\n      && isCommentsLoaded\n      && comments.length > 0;\n\n    const isLoadedCommentsNotExist = !isLoading\n      && !isCommentsLoadingError\n      && isCommentsLoaded\n      && !comments.length;\n\n    const isLoadedError = !isLoading && isCommentsLoadingError;\n\n    const isVisibleButton = !isLoading\n      && !isCommentsLoadingError\n      && !isNewCommentFormOpened;\n\n    return (\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"content\" data-cy=\"PostDetails\">\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n              {`#${id}: ${title}`}\n            </h2>\n\n            <p data-cy=\"PostBody\">\n              {body}\n            </p>\n          </div>\n\n          <div className=\"block\">\n            {isLoading && <Loader />}\n\n            {isLoadedError && (\n              <ErrorNotification error={Errors.CommentsError} />\n            )}\n\n            {isLoadedCommentsNotExist && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n            {isLoadedCommentsExist && (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n\n                {comments.map(comment => (\n                  <CommentItem\n                    key={comment.id}\n                    comment={comment}\n                    onDeleteComment={deleteSelectedComment}\n                  />\n                ))}\n              </>\n            )}\n\n            {isVisibleButton && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={onOpenNewCommentForm}\n              >\n                Write a comment\n              </button>\n            )}\n          </div>\n\n          {isNewCommentFormOpened && (\n            <NewCommentForm\n              onAdd={addNewComment}\n              isLoading={isAddingComment}\n              postId={id}\n            />\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { FC, useState, useEffect } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUserId: number;\n  onSelectUserId: (userId: number) => void;\n  onResetPostId: () => void;\n};\n\nexport const UserSelector: FC<Props> = React.memo(\n  ({\n    users,\n    selectedUserId,\n    onSelectUserId,\n    onResetPostId,\n  }) => {\n    const [isUsersListOpened, setIsUsersListOpened] = useState(false);\n\n    useEffect(() => {\n      if (!isUsersListOpened) {\n        return;\n      }\n\n      const closeUsersList = () => setIsUsersListOpened(false);\n\n      document.addEventListener('click', closeUsersList);\n\n      // eslint-disable-next-line consistent-return\n      return () => document.removeEventListener('click', closeUsersList);\n    }, [isUsersListOpened]);\n\n    const selectedUserName = users.find(\n      user => user.id === selectedUserId,\n    )?.name;\n\n    const handleClickToggleUsersList = () => (\n      setIsUsersListOpened(prev => !prev)\n    );\n\n    const handleClickSelectUser = (userId: number) => {\n      onSelectUserId(userId);\n      handleClickToggleUsersList();\n      onResetPostId();\n    };\n\n    return (\n      <div\n        data-cy=\"UserSelector\"\n        className={cn(\n          'dropdown',\n          { 'is-active': isUsersListOpened },\n        )}\n      >\n        <div className=\"dropdown-trigger\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            aria-haspopup=\"true\"\n            aria-controls=\"dropdown-menu\"\n            onClick={handleClickToggleUsersList}\n          >\n            <span>\n              {selectedUserName || 'Choose a user'}\n            </span>\n\n            <span className=\"icon is-small\">\n              <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n            </span>\n          </button>\n        </div>\n\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className={cn(\n                  'dropdown-item',\n                  { 'is-active': selectedUserId === user.id },\n                )}\n                key={user.id}\n                onClick={() => handleClickSelectUser(user.id)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n} from 'react';\nimport cn from 'classnames';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\nimport { ErrorNotification } from './components/ErrorNotification';\nimport { Errors } from './types/Errors';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isPostsLoaded, setIsPostsLoaded] = useState(false);\n  const [isPostsLoadingError, setIsPostsLoadingError] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isNewCommentFormOpened, setIsNewCommentFormOpened] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  const selectUserId = useCallback((userId: number) => {\n    setSelectedUserId(userId);\n    setIsLoading(true);\n  }, []);\n\n  const selectPostId = useCallback((postId: number) => {\n    setSelectedPostId(prev => (prev !== postId ? postId : 0));\n    setIsNewCommentFormOpened(false);\n  }, []);\n\n  const resetSelectedPostId = useCallback(() => {\n    setSelectedPostId(0);\n  }, []);\n\n  const openNewCommentForm = useCallback(() => {\n    setIsNewCommentFormOpened(true);\n  }, []);\n\n  useEffect(() => {\n    if (isLoading) {\n      getPosts(selectedUserId)\n        .then(loadedPosts => {\n          setPosts(loadedPosts);\n          setIsPostsLoaded(true);\n          setIsPostsLoadingError(false);\n        })\n        .catch(() => {\n          setIsPostsLoadingError(true);\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUserId]);\n\n  const isLoadedPostsExist = !isLoading\n    && !isPostsLoadingError\n    && isPostsLoaded\n    && posts.length > 0;\n\n  const isLoadedPostsNotExist = !isLoading\n    && !isPostsLoadingError\n    && isPostsLoaded\n    && !posts.length;\n\n  const isLoadedError = !isLoading && isPostsLoadingError;\n\n  const selectedPost = useMemo(() => (\n    posts.find(post => post.id === selectedPostId)\n  ), [posts, selectedPostId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  onSelectUserId={selectUserId}\n                  onResetPostId={resetSelectedPostId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isLoadedError && (\n                  <ErrorNotification error={Errors.PostsLoadingError} />\n                )}\n\n                {isLoadedPostsExist && (\n                  <PostsList\n                    posts={posts}\n                    selectedPostId={selectedPostId}\n                    onSelectPostId={selectPostId}\n                  />\n                )}\n\n                {isLoadedPostsNotExist && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPostId },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  postDetails={selectedPost}\n                  isNewCommentFormOpened={isNewCommentFormOpened}\n                  onOpenNewCommentForm={openNewCommentForm}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}